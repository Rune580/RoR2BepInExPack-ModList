using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using BepInEx;
using UnityEngine;
using Path = System.IO.Path;
using Newtonsoft.Json;

namespace RoR2BepInExPack.ModListSystem;

public class ModData
{
    internal static readonly List<ModData> Instances = new();
    
    public string Guid { get; internal set; }
    public string Name { get; internal set; }
    public string Author { get; internal set; }
    public Version Version { get; internal set; }
    public string DescriptionToken { get; internal set; }
    public Sprite Icon { get; internal set; }
    public HyperLink[] Links { get; internal set; }
    public bool SupportsRuntimeToggling { get; internal set; }
    
    internal bool AutoGenerated { get; set; }

    internal ModData() { }

    internal void Validate(PluginInfo info)
    {
        bool hasManifest = TryReadManifest(info, out ThunderstoreManifest manifest);

        if (string.IsNullOrEmpty(Name) || AutoGenerated)
            Name = hasManifest ? manifest.Name.Replace('_', ' ') : info.Metadata.Name;
        
        if (Author == "Unknown Author" || AutoGenerated)
            Author = ResolveAuthor(info, manifest);

        if (Version is null || AutoGenerated)
        {
            Version = info.Metadata.Version;
            if (hasManifest)
            {
                Version manifestVersion = new Version(manifest.VersionNumber);
                if (Version < manifestVersion)
                    Version = manifestVersion;
            }
        }
            

        ValidateIcon(info);
    }

    private bool TryReadManifest(PluginInfo info, out ThunderstoreManifest manifest)
    {
        manifest = null;
        try
        {
            string searchDir = Path.GetFullPath(info.Location);

            while (!string.Equals(Directory.GetParent(searchDir)!.Name, "plugins", StringComparison.OrdinalIgnoreCase))
                searchDir = Directory.GetParent(searchDir)!.FullName;
            
            string manifestPath = Directory.EnumerateFiles(searchDir, "manifest.json", SearchOption.AllDirectories).FirstOrDefault();

            if (manifestPath == default)
                return false;

            string manifestContents = File.ReadAllText(manifestPath);

            manifest = JsonConvert.DeserializeObject<ThunderstoreManifest>(manifestContents);

            return manifest != null;
        }
        catch
        {
            // Couldn't find or parse the manifest, mod was probably manually installed.
            return false;
        }
    }

    private string ResolveAuthor(PluginInfo info, ThunderstoreManifest manifest)
    {
        string author = "Unknown Author";
        
        try
        {
            string pluginFolder = Path.GetFullPath(info.Location);
            
            while (!string.Equals(Directory.GetParent(pluginFolder)!.Name, "plugins", StringComparison.OrdinalIgnoreCase))
                pluginFolder = Directory.GetParent(pluginFolder)!.FullName;

            pluginFolder = pluginFolder.Split(Path.DirectorySeparatorChar).Last();

            if (!pluginFolder.Contains('-'))
                return author;

            author = pluginFolder.Replace($"-{manifest.Name}", "");
        }
        catch
        {
            // Couldn't resolve author name.
        }

        return author;
    }
    
    private void ValidateIcon(PluginInfo info)
    {
        if (Icon)
            return;

        try
        {
            string searchDir = Path.GetFullPath(info.Location);

            while (!string.Equals(Directory.GetParent(searchDir)!.Name, "plugins", StringComparison.OrdinalIgnoreCase))
                searchDir = Directory.GetParent(searchDir)!.FullName;

            string iconPath = Directory.EnumerateFiles(searchDir, "icon.png", SearchOption.AllDirectories).FirstOrDefault();

            if (iconPath == default)
                return;

            Texture2D texture = new Texture2D(256, 256);
            if (!texture.LoadImage(File.ReadAllBytes(iconPath)))
                return;

            if (!texture)
                return;
            
            Icon = Sprite.Create(texture, new Rect(0, 0, texture.width, texture.height), new Vector2(0.5f, 0.5f), 100);
        }
        catch
        {
            // Couldn't find icon for one reason or another
        }
    }
    public class ThunderstoreManifest
    {
        [JsonProperty("name")]
        public string Name { get; set; }
        
        [JsonProperty("version_number")]
        public string VersionNumber { get; set; }
        
        [JsonProperty("website_url")]
        public string WebsiteURL { get; set; }
        
        [JsonProperty("description")]
        public string Description { get; set; }
        
        [JsonProperty("dependencies")]
        public IList<string> Dependencies { get; set; }
    }
}
